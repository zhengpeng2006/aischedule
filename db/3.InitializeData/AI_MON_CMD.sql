insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (14, 'BUSI_PROC_KPI', 'KPI', 'SHELL', concat(' #!/bin/bash' , char(10) , ' ' , char(10) , ' if [ $# -ne 1 ]; then' , char(10) , '     echo "ERR_PARAM"' , char(10) , '     exit' , char(10) , ' fi' , char(10) , ' ' , char(10) , ' SERVER_NAME=$1' , char(10) , ' ' , char(10) , ' PROCESS_ID=`ps -ef | grep $SERVER_NAME | grep java | grep -v grep | awk ''{print $2}''`' , char(10) , ' if [ ! -n "$PROCESS_ID" ]; then' , char(10) , '      echo "NONE"' , char(10) , '      exit' , char(10) , ' fi   ' , char(10) , ' ' , char(10) , ' i=0' , char(10) , ' tmpItemArr=($PROCESS_ID)' , char(10) , ' i=${#tmpItemArr[@]}' , char(10) , ' if [ $i -gt 1 ]; then' , char(10) , '     echo "GT1"' , char(10) , '     exit' , char(10) , ' fi  ' , char(10) , ' ' , char(10) , ' BUSI_TOP_INFO=`top -d 1 -bn 1 -p ${PROCESS_ID} | grep ${PROCESS_ID} | awk ''{print $1 ":" $2 ":" $9 ":" $10}''`' , char(10) , ' ' , char(10) , ' echo "${BUSI_TOP_INFO}"'), null, 'U', '查询进程CPU、内存占用率');
insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (15, 'KPI_CPU_MEM', 'KPI', 'SHELL', concat('#!/bin/bash' , char(10) , 'psInfo=`ps -ef | grep -v grep | grep -v $0 | tr ''\\n'' ''#'' | tr -s '' '' | tr '' '' ''~'' | tr ''#'' '' ''`' , char(10) , '' , char(10) , 'if [ ! -n "$psInfo" ]; then' , char(10) , '        echo "false"' , char(10) , '        exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'declare processInfoArr=($psInfo)' , char(10) , '' , char(10) , 'length=${#processInfoArr[@]}' , char(10) , '' , char(10) , 'newLineInfo=""' , char(10) , 'for ((i = 0; i < $length; i++ )) do' , char(10) , '        itemLine=${processInfoArr[$i]}' , char(10) , '        itemInfo=`echo $itemLine | tr ''~'' '' ''`' , char(10) , '        itemArr=($itemInfo)' , char(10) , '        itemLength=${#itemArr[@]}' , char(10) , '         ' , char(10) , '  pidInfo=""' , char(10) , '  cmdInfo=""' , char(10) , '  for ((j=0; j<$itemLength; j++)) do' , char(10) , '    if [ $j -eq 0 ]; then' , char(10) , '      pidInfo="$pidInfo ${itemArr[$j]}"' , char(10) , '    elif [ $j -eq 1 ]; then ' , char(10) , '      pidInfo="$pidInfo ${itemArr[$j]}"' , char(10) , '    elif [ $j -ge 7 ]; then' , char(10) , '      cmdInfo="$cmdInfo ${itemArr[$j]}"' , char(10) , '    fi ' , char(10) , '  done ' , char(10) , '  cmdInfo=`echo $cmdInfo | tr -s '' '' | tr '' '' ''~''`' , char(10) , '  newItemInfo=`echo $pidInfo $cmdInfo | tr '' '' ''#''`' , char(10) , '  newLineInfo="$newLineInfo$newItemInfo^^^"' , char(10) , 'done' , char(10) , 'detailinfo=`top -d 1 -bn 1 | awk ''{print $1 " " $2 " " $6 " " $9 " " $10}'' | tr ''\\n'' ''*'' | tr -s '' '' | tr '' '' ''#''`' , char(10) , '' , char(10) , 'resultInfo="$newLineInfo%% $detailinfo"' , char(10) , '' , char(10) , 'echo $resultInfo'), null, 'U', '查询当前主机应用程序的内存CPU占比信息');
insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (10, 'BUSI_PROC_EXIST', 'IS_EXIST', 'SHELL', concat('#!/bin/bash' , char(10) , '' , char(10) , 'if [ $# -ne 2 ]; then' , char(10) , '    echo "need param"' , char(10) , '    exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'SERVER_NAME=$1' , char(10) , 'USER_NAME=$2' , char(10) , '' , char(10) , 'PROCESS_ID=`ps -ef | grep $SERVER_NAME | grep $USER_NAME | grep java | grep -v grep | awk ''{print $2}''`' , char(10) , '' , char(10) , 'if [ ! -n "$PROCESS_ID" ]; then' , char(10) , '    echo ''NONE''' , char(10) , '    exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'i=0' , char(10) , 'tmpProcIdArr=($PROCESS_ID)' , char(10) , '' , char(10) , 'i=${#tmpProcIdArr[@]}' , char(10) , '' , char(10) , '' , char(10) , 'if [ $i -gt 1 ]; then' , char(10) , '    echo "1"' , char(10) , '    exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'echo "1"'), null, 'U', '查看指定进程是否存在');
insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (11, 'START_SHELL', 'START', 'SHELL', concat('#!/bin/ksh' , char(10) , '' , char(10) , 'if [ $# -ne 2 ];' , char(10) , 'then' , char(10) , '' , char(9) , 'echo "传入参数必须是node的目录名称和server名称"' , char(10) , '' , char(9) , 'exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'PF_PATH=$1' , char(10) , 'SERVER_NAME=$2' , char(10) , '' , char(10) , 'echo "现在开始启动集群$PF_PATH中的归属服务器$SERVER_NAME"' , char(10) , '' , char(10) , '$PF_PATH/bin/start_$SERVER_NAME.sh &' , char(10) , '' , char(10) , 'echo "集群$PF_PATH中的归属服务器$SERVER_NAME 发送启动命令完成,需要等待几分钟启动才可以完成"' , char(10) , '                                                                                           sleep 10' , char(10) , '' , char(10) , 'PROCESS_STATE=`ps -ef | grep $SERVER_NAME | grep java`' , char(10) , 'if [ -z $PROCESS_STATE ];' , char(10) , 'then' , char(10) , '' , char(9) , 'echo "SUCCESSFUL"' , char(10) , '' , char(9) , 'exit' , char(10) , 'fi' , char(10) , '                                                                                           '), null, 'U', 'test');
insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (12, 'STOP_SHELL', 'STOP', 'SHELL', concat('#!/bin/ksh' , char(10) , '' , char(10) , 'if [ $# -ne 2 ];' , char(10) , 'then' , char(10) , '' , char(9) , 'echo "传入参数必须是node的目录名称和server名称"' , char(10) , '' , char(9) , 'exit' , char(10) , 'fi' , char(10) , '' , char(10) , 'PF_PATH=$1' , char(10) , 'SERVER_NAME=$2' , char(10) , '' , char(10) , 'echo "现在开始停止集群$PF_PATH中的归属服务器$SERVER_NAME"' , char(10) , '' , char(10) , '$PF_PATH/bin/stop_$SERVER_NAME.sh &' , char(10) , '' , char(10) , 'echo "集群$PF_PATH中的归属服务器$SERVER_NAME 发送停止命令完成"'), null, 'U', null);
insert into AI_MON_CMD (cmd_id, cmd_name, cmd_desc, cmd_type, cmd_expr, param_type, state, remark)
values (16, 'KPI_HOST_INFO', 'KPI', 'SHELL', concat('#!/bin/sh' , char(10) , '' , char(10) , '###------------ KPI CPU -----------------------' , char(10) , '' , char(10) , 'CPU_IDLE_PERCENT=`vmstat 1 2| tail -n 1 | awk ''{print$15}''`' , char(10) , 'CPU_USED_PERCENT=`expr 100 - $CPU_IDLE_PERCENT`' , char(10) , 'kpiCpuInfo=${CPU_USED_PERCENT}' , char(10) , '' , char(10) , '' , char(10) , '' , char(10) , '###------------ KPI MEM ------------------------' , char(10) , '' , char(10) , 'FREE=`cat /proc/meminfo | grep MemFree | awk ''{print$2}''`' , char(10) , 'TOTAL=`cat /proc/meminfo | grep MemTotal | awk ''{print$2}''`' , char(10) , 'BUFFER=`cat /proc/meminfo | grep Buffers | awk ''{print$2}''`' , char(10) , 'CACHED=`cat /proc/meminfo | grep Cached | grep -v SwapCached| awk ''{print$2}''`' , char(10) , 'TMP1=`expr $TOTAL - $FREE - $BUFFER - $CACHED`' , char(10) , 'TMP2=`expr $TMP1 \\* 100`' , char(10) , 'MEM_USED_PERCENT=`expr $TMP2 / $TOTAL`' , char(10) , 'kpiMemInfo=${MEM_USED_PERCENT}' , char(10) , '' , char(10) , '' , char(10) , '###----------- KPI FILE SYS ---------------------' , char(10) , '' , char(10) , 'FILE_USER_PERCENT=`df -m | tr ''\\n'' ''#'' | tr -s '' '' | tr '' '' ''~'' | tr ''#'' '' '' | sed s/" ~"/"~"/g`' , char(10) , 'declare kpiFileInfoArr=($FILE_USER_PERCENT)' , char(10) , 'length=${#kpiFileInfoArr[@]}' , char(10) , '' , char(10) , 'for((i=1;i<$length;i++)) do' , char(10) , '    itemLine=${kpiFileInfoArr[$i]}' , char(10) , '    itemInfo=`echo $itemLine | tr ''~'' '' ''`' , char(10) , '    itemArr=($itemInfo)' , char(10) , '    itemLength=${#itemArr[@]}' , char(10) , '    if [ $itemLength -ge 6 ]; then' , char(10) , '      kpiFileInfo="$kpiFileInfo${itemArr[5]}|${itemArr[1]}|${itemArr[4]}#"' , char(10) , '    fi' , char(10) , 'done' , char(10) , '' , char(10) , 'echo "$kpiCpuInfo:$kpiMemInfo:$kpiFileInfo"'), null, 'U', '查询主机CPU、内存、文件系统使用情况');
commit;